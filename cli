#!/bin/bash

# Define the CLI commands and their corresponding functions
declare -A commands
commands[addAcls]="addAcls"
commands[addQuestion]="addQuestion"
commands[changeApiKey]="changeApiKey"
commands[changeOwner]="changeOwner"
commands[check_course_has_memory_vectors_entry]="check_course_has_memory_vectors_entry"
commands[listCourses]="listCourses"
commands[createCourse]="createCourse"
commands[getCourseQuestions]="getCourseQuestions"
commands[getOwner]="getOwner"
commands[getProfile]="getProfile"
commands[getRandomCourseQuestions]="getRandomCourseQuestions"
commands[enrollCourse]="enrollCourse"
commands[generateRandomNumber]="generateRandomNumber"
commands[getCourseResources]="getCourseResources"
commands[createResource]="createResource"
commands[getRunMessage]="getRunMessage"
commands[getRunQuestions]="getRunQuestions"
commands[getRunStatus]="getRunStatus"
commands[getRunsInQueue]="getRunsInQueue"
commands[getUserEnrolledCourse]="getUserEnrolledCourse"
commands[removeAcls]="removeAcls"
commands[removeQuestion]="removeQuestion"
commands[removeResource]="removeResource"
commands[sendMessage]="sendMessage"
commands[setAssistantId]="setAssistantId"
commands[setRunProcess]="setRunProcess"
commands[set_icrc1_token_canister]="set_icrc1_token_canister"
commands[updateCourse]="updateCourse"
commands[getAcls]="getAcls"
commands[generateQuestionsForCourse]="generateQuestionsForCourse"
commands[createToken]="createToken"

# Define the functions for each command
createToken() {
    if [ $# -ne 3 ]; then
        echo "Usage: $0 createToken <a> <b> <c>"
        echo ""
        echo "<a> is the deployer identity."
        echo "<b> is the canister name for the token minter."
        echo "<c> is the network to deploy the token canister."
        return 1
    fi

    # Validate network
    if [ "$3" != "ic" ] && [ "$3" != "local" ]; then
        echo "Error: Invalid network. Must be 'ic' or 'local'."
        return 1
    fi

    PRE_MINTED_TOKENS=10_000_000_000_000

    TRANSFER_FEE=10_000

    dfx identity new archive_controller
    dfx identity use archive_controller
    ARCHIVE_CONTROLLER=$(dfx identity get-principal)

    TRIGGER_THRESHOLD=2000

    CYCLE_FOR_ARCHIVE_CREATION=10000000000000

    NUM_OF_BLOCK_TO_ARCHIVE=1000

    TOKEN_NAME="AntiCorruptionToken"

    TOKEN_SYMBOL="ACT"

    dfx identity use "$1"
    DEFAULT=$(dfx identity get-principal)

    # Make the canister the minter so can mint new tokens to users
    MINTER=$(dfx canister id "$2" --network "$3")

    FEATURE_FLAGS=true

    dfx deploy icrc1_ledger_canister --argument "(variant {Init =
record {
     token_symbol = \"${TOKEN_SYMBOL}\";
     token_name = \"${TOKEN_NAME}\";
     minting_account = record { owner = principal \"${MINTER}\" };
     transfer_fee = ${TRANSFER_FEE};
     metadata = vec {};
     feature_flags = opt record{icrc2 = ${FEATURE_FLAGS}};
     initial_balances = vec { record { record { owner = principal \"${DEFAULT}\"; }; ${PRE_MINTED_TOKENS}; }; };
     archive_options = record {
         num_blocks_to_archive = ${NUM_OF_BLOCK_TO_ARCHIVE};
         trigger_threshold = ${TRIGGER_THRESHOLD};
         controller_id = principal \"${ARCHIVE_CONTROLLER}\";
         cycles_for_archive_creation = opt ${CYCLE_FOR_ARCHIVE_CREATION};
     };
 }
    })" --network "$3" --mode reinstall
}

# Hi, what do you think are the necessary conventions of corruption

# dfx canister call c2lt4-zmaaa-aaaaa-qaaiq-cai add "(record { content = \"test\"; embeddings = vec { -0.007229743991047144 } })" --candid src/declarations/arcmindvectordb/arcmindvectordb.did
# dfx canister call c2lt4-zmaaa-aaaaa-qaaiq-cai search "(variant { Embeddings = vec { 0.04350004717707634;-0.03919185698032379;-0.007166648283600807;0.034868545830249786;-0.018296964466571808;0.041733261197805405;0.036867957562208176;-0.01734335906803608;0.058700188994407654;-0.04186590015888214;-0.04011668637394905;-0.00347800157032907;-0.006305045448243618;-0.003729406278580427;-0.06715521961450577;0.03713268041610718;0.052595656365156174;-0.03084641508758068;0.03203390911221504;0.0232179407030344;0.0017409935826435685;0.004919260740280151;0.04844778776168823;0.01799495704472065;0.038536906242370605;-0.03306600823998451;0.04168124869465828;-0.053210578858852386;-0.026686659082770348;0.015934661030769348;-0.048728715628385544;0.03908518701791763;0.05115741863846779;0.02947445772588253;0.04486292228102684;-0.006464790087193251;-0.0312960222363472;0.03207879886031151;-0.0414961539208889;-0.07335659861564636;-0.052386511117219925;-0.05159788951277733;-0.013597034849226475;-0.026272205635905266;0.04910508170723915;-0.01594056561589241;0.007135563064366579;0.018252702429890633;-0.004282472189515829;0.05987689271569252;-0.05811762809753418;0.03680400922894478;0.06506431847810745;-0.0005835393094457686;0.05074553191661835;-0.03287385404109955;-0.05495939776301384;-0.03785184770822525;0.0073219952173531055;0.06699404865503311;-0.07178271561861038;0.03820708766579628;-0.026638146489858627;-0.01144400704652071;0.046266164630651474;0.06529910117387772;0.033950742334127426;0.01133454404771328;0.03150603920221329;0.012312095612287521;0.0654226541519165;0.06624165922403336;-0.03216971084475517;-0.0678810104727745;0.06356508284807205;-0.03967153653502464;0.02051953226327896;0.07596112042665482;0.013355582021176815;-0.06787778437137604;0.06773476302623749;-0.039075978100299835;-0.049689631909132004;-0.03668660670518875;-0.025059405714273453;0.07056358456611633;0.06543614715337753;0.0605178065598011;-0.0723273903131485;0.03277476876974106;0.048498690128326416;-0.03224855661392212;0.047044917941093445;0.0012630476849153638;-0.03776651620864868;0.06016381084918976;0.004344465676695108;0.01871429942548275;-0.07182838022708893;0.027816614136099815;-0.04867566376924515;0.03455963358283043;0.07218238711357117;0.003624195931479335;0.015183764509856701;-0.04208178073167801;0.01599796488881111;0.04683072865009308;0.043404459953308105;0.00031570217106491327;-0.030958212912082672;-0.06527911871671677;-0.012523575685918331;0.026449352502822876;0.07206056267023087;0.05346042662858963;-0.05909140035510063;0.04647804796695709;-0.04809052497148514;-0.04778311401605606;-0.0671406164765358;-0.07493166625499725;0.05673620104789734;-0.026339216157794;-0.02826470136642456;-0.014919975772500038;-0.008317518047988415;0.048565398901700974;0.056575994938611984;0.06952369958162308;0.030840566381812096;-0.057514745742082596;0.04798567667603493;-0.038900312036275864;-0.013266842812299728;-0.052127908915281296;0.07350490242242813;-0.004032054916024208;0.03134419769048691;0.002339121187105775;-0.007371589541435242;-0.05509662628173828;-0.005145019851624966;0.07061353325843811;-0.010523570701479912;0.030947064980864525;0.029865901917219162;0.013931583613157272;0.06069495156407356;0.028373077511787415;-0.04363042861223221;-0.027876973152160645;0.0148098049685359;-0.07322514057159424;-0.04259504750370979;-0.010393689386546612;-0.01586347445845604;-0.04730017110705376;-0.015523365698754787;0.004990215413272381;-0.03587472066283226;0.029773343354463577;0.048999350517988205;-0.053443606942892075;0.018086181953549385;0.0546112097799778;0.03230897709727287;-0.04101845249533653;-0.0701688677072525;0.06158589571714401;0.05735035240650177;-0.048807017505168915;0.030334550887346268;0.06505300104618073;0.05757255107164383;0.0512663908302784;-0.04123334214091301;0.05209118127822876;0.06918339431285858;0.027396690100431442;-0.03556482121348381;0.025627387687563896;-0.01969446986913681;-0.06644153594970703;0.03854668512940407;-0.00704329926520586;0.05900179594755173;0.030203595757484436;-0.05374186486005783;0.053250133991241455;0.06918291002511978;0.03516006842255592;-0.009838792495429516;0.011188019998371601;0.06617698073387146;0.04102237522602081;0.04688360542058945;0.04935251176357269;0.007994542829692364;0.07006600499153137;-0.031202878803014755;-0.009996668435633183;-0.020402580499649048;-0.06562406569719315;-0.06487039476633072;-0.022116854786872864;-0.020874662324786186;-0.07176291942596436;0.0146233094856143;0.02730235457420349;-0.04935893788933754;-0.012522358447313309;-0.04934043064713478;0.039026420563459396;0.06410019099712372;0.07212889194488525;-0.0669109970331192;0.039704158902168274;-0.04143377020955086;0.029618192464113235;0.0649491474032402;0.000048425466957269236;0.04931220784783363;-0.0673728659749031;0.02628057263791561;0.020617928355932236;-0.057272762060165405;0.060803160071372986;0.0057451603934168816;0.020198265090584755;-0.026301244273781776;0.07395676523447037;-0.05396934226155281;0.04836863651871681;-0.03815853223204613;0.029946444556117058;0.042403899133205414;0.0011448177974671125;-0.054070569574832916;0.06085065379738808;-0.046404510736465454;0.055344533175230026;0.0599147267639637;-0.04202086478471756;0.0746292844414711;-0.062434062361717224;-0.0018899294082075357;-0.03837864100933075;-0.052285533398389816;-0.04776710644364357;-0.013887432403862476;-0.046921830624341965;0.005624668672680855;-0.06527598947286606;-0.03825422376394272;-0.007033476140350103;-0.031180450692772865;0.01039446983486414;0.04537447169423103;0.017002256587147713;0.021434910595417023;0.019129760563373566;-0.06235450506210327;-0.05471855401992798;-0.00510283512994647;0.04895901307463646;0.036508429795503616;0.048807576298713684;-0.04426484927535057;-0.06949914991855621;0.027165785431861877;-0.010444745421409607;0.0533023402094841;-0.007264443673193455;-0.032153982669115067;-0.02828861214220524;-0.045980311930179596;-0.05025966092944145;-0.01177754532545805;0.02429705299437046;0.05121154710650444;0.0663352757692337;0.017264295369386673;0.06414323300123215;-0.0061226398684084415;0.013284971937537193;0.06606383621692657;-0.005662985611706972;0.06278367340564728;-0.05230572447180748;0.0029450180009007454;-0.04442472755908966;0.029745811596512794;0.006906623020768166;0.040666017681360245;-0.06560169905424118;0.04088091850280762;0.03046083077788353;0.043516043573617935;0.02043105475604534;-0.054620228707790375;0.07409659028053284;-0.037474099546670914;-0.013899894431233406;-0.05753841623663902;0.04155962914228439;0.0540616512298584;-0.019178295508027077;0.026151802390813828;-0.05878431349992752;-0.016104944050312042;-0.025855718180537224;0.05632774159312248;-0.02409648895263672;-0.04668577015399933;-0.04153027385473251;-0.06510914117097855;-0.03394806385040283;0.04355035349726677;0.05746089667081833;-0.037073034793138504;-0.0323575921356678;-0.02681301161646843;-0.06600800156593323;-0.02989180199801922;0.013439994305372238;-0.0022620484232902527;0.011623120866715908;-0.06005841866135597;-0.026449892669916153;0.04081391170620918;0.02587457187473774;-0.07148680835962296;-0.05427625775337219;0.06801200658082962;-0.02215132676064968;-0.007737679872661829;0.02644328586757183;0.009107984602451324;0.04213375970721245;-0.051262203603982925;-0.0005676653236150742;0.0622202605009079;-0.07436215132474899;-0.03317195177078247;-0.02858457900583744;0.07249991595745087;0.04066762700676918;0.05813685059547424;0.06385978311300278;-0.014803281985223293;0.0025672318879514933;-0.061672959476709366;-0.028735216706991196;0.041235070675611496;-0.010454008355736732;-0.01364891231060028;-0.020358016714453697;-0.022388456389307976;-0.05311381816864014;0.040245626121759415;0.01435345970094204;0.04029133543372154;-0.031058419495821;0.06666385382413864;-0.023815946653485298;-0.05610603094100952;-0.028953934088349342;-0.04509717971086502;0.06614916026592255;-0.015789294615387917;-0.04729112982749939;0.015366710722446442;0.05770950764417648;-0.07390477508306503;-0.0541028156876564;0.048591844737529755;-0.02272338792681694;-0.004675799049437046;0.024510040879249573;-0.050389211624860764;0.0390724241733551;0.013385828584432602;0.0023656515404582024;-0.04707000032067299;0.06263751536607742;-0.031276047229766846;0.021320044994354248;0.06315121799707413;-0.015522406436502934;0.05796615406870842;-0.03833625465631485;-0.06294291466474533;0.003723173402249813;0.016915135085582733;0.06488167494535446;0.05612584948539734;0.025169022381305695;-0.06115139275789261;-0.013983730226755142;-0.06490818411111832;0.009634505957365036;0.03346802666783333;0.06497000902891159;-0.058502692729234695;-0.036265648901462555;-0.006447481457144022;-0.025449026376008987;-0.03264321759343147;-0.043375492095947266;0.06273246556520462;-0.042175497859716415;0.04674375057220459;-0.05915997922420502;-0.014289856888353825;0.006242235656827688;-0.025542138144373894;0.04555559903383255;0.06636516004800797;0.04676200449466705;-0.0050574662163853645;0.031017160043120384;-0.005245152860879898;-0.04547407478094101;-0.07065039873123169;0.05040619522333145;-0.032502394169569016;-0.03949544578790665;-0.005134073086082935;-0.06223164498806;-0.0060728928074240685;0.06911088526248932;0.045840922743082047;-0.043823305517435074;0.06545746326446533;0.06527480483055115;-0.020057685673236847;-0.06495687365531921;-0.020557910203933716;0.01026860624551773;0.07045552879571915;-0.021166017279028893;-0.018938111141324043;0.059209827333688736;0.0023229478392750025;0.036580946296453476;0.049402836710214615;0.062365882098674774;0.010387014597654343;0.06547700613737106;-0.06342566013336182;-0.0664546862244606;0.06270523369312286;-0.03242792934179306;-0.05110015347599983;-0.041621699929237366;-0.002629060298204422;-0.07294518500566483;0.013218807987868786;-0.004771075211465359;0.07589107006788254;0.05143136903643608;-0.01875545270740986;0.04746529459953308;0.03782721608877182;0.06607716530561447;-0.03295134752988815;0.02164677157998085;-0.009147237055003643;-0.06888803839683533;0.05699821561574936;-0.07632351666688919;-0.001305694691836834;0.00020470273739192635;0.05303815007209778;-0.07240375131368637;0.04224975034594536;-0.07401078194379807;-0.06607051193714142;-0.043271150439977646;-0.060431983321905136;0.06047441065311432;-0.010262801311910152;-0.04970690608024597;0.04457161948084831;-0.01936527155339718;-0.00018230333807878196;-0.02740788646042347;-0.05675690248608589;0.06756697595119476;0.028945187106728554;-0.021749168634414673;-0.04573724418878555;-0.07083673030138016;-0.04913461208343506;0.05728250369429588;0.029605146497488022;-0.0010362874018028378;0.06306949257850647;0.051096826791763306;0.008663205429911613;-0.011737032793462276;-0.07448090612888336;0.02452273666858673;-0.0011819918872788548;0.07238595932722092;0.010049781762063503;-0.01348244957625866;-0.04471958801150322;-0.061968930065631866;-0.05273841693997383;0.011604441329836845 } }, 1)" --candid src/declarations/arcmindvectordb/arcmindvectordb.did

addAcls() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 addAcls <a>"
        echo ""
        echo "<a> is the principal to add to the ACLs."
        return 1
    fi
    dfx canister call backend addAcls "(principal \"$1\")"
}

addQuestion() {
    if [ $# -lt 4 ]; then
        echo "Usage: $0 addQuestion <course_id> <question_id> <correct_option> <description> [options...]"
        echo ""
        echo "<course_id> is the ID of the course."
        echo "<question_id> is the ID of the question."
        echo "<correct_option> is the correct option."
        echo "<description> is the description of the question."
        echo "[options...] are the options (option number and description)."
        return 1
    fi

    course_id=$1
    question_id=$2
    correct_option=$3
    description=$4
    shift 4

    options=()
    while [ $# -gt 0 ]; do
        if [ $# -lt 2 ]; then
            echo "Error: Options must be provided in pairs (option number and description)."
            return 1
        fi
        option_number=$1
        option_description=$2
        options+=("(record { option = $option_number; description = \"$option_description\" })")
        shift 2
    done

    options_str=$(IFS=';'; echo "${options[*]}")
    dfx canister call backend addQuestion "(\"$course_id\", record { id = \"$question_id\"; correctOption = $correct_option; description = \"$description\"; options = vec { $options_str } })"
}

changeApiKey() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 changeApiKey <a>"
        echo ""
        echo "<a> is the new API key."
        return 1
    fi
    dfx canister call backend changeApiKey "\"$1\""
}

changeOwner() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 changeOwner <new_owner>"
        echo ""
        echo "<new_owner> is the new owner."
        return 1
    fi
    dfx canister call backend changeOwner "\"$1\""
}

check_course_has_memory_vectors_entry() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 check_course_has_memory_vectors_entry <course_id>"
        echo ""
        echo "<course_id> is the ID of the course."
        return 1
    fi
    dfx canister call backend check_course_has_memory_vectors_entry "\"$1\""
}

listCourses() {
    dfx canister call backend listCourses
}

createCourse() {
    if [ $# -ne 2 ]; then
        echo "Usage: $0 createCourse <a> <b>"
        echo ""
        echo "<a> is the title of the course."
        echo "<b> is the summary of the course."
        return 1
    fi
    dfx canister call backend createCourse "(\"$1\", \"$2\")"
}

getCourseQuestions() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 getCourseQuestions <course_id>"
        echo ""
        echo "<course_id> is the ID of the course."
        return 1
    fi
    dfx canister call backend getCourseQuestions "\"$1\""
}

getOwner() {
    dfx canister call backend getOwner
}

getProfile() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 getProfile <user_id>"
        echo ""
        echo "<user_id> is the ID of the user."
        return 1
    fi
    dfx canister call backend getProfile "\"$1\""
}

getRandomCourseQuestions() {
    if [ $# -ne 2 ]; then
        echo "Usage: $0 getRandomCourseQuestions <course_id> <number_of_questions>"
        echo ""
        echo "<course_id> is the ID of the course."
        echo "<number_of_questions> is the number of questions to get."
        return 1
    fi
    dfx canister call backend getRandomCourseQuestions "(\"$1\", $2)"
}

enrollCourse() {
    if [ $# -ne 2 ]; then
        echo "Usage: $0 enrollCourse <course_id> <student_id>"
        echo ""
        echo "<course_id> is the ID of the course."
        echo "<student_id> is the ID of the student."
        return 1
    fi
    dfx canister call backend enrollCourse "(\"$1\", \"$2\")"
}

generateRandomNumber() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 generateRandomNumber <max_number>"
        echo ""
        echo "<max_number> is the maximum number to generate."
        return 1
    fi
    dfx canister call backend generateRandomNumber "$1"
}

getCourseResources() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 getCourseResources <course_id>"
        echo ""
        echo "<course_id> is the ID of the course."
        return 1
    fi
    dfx canister call backend getCourseResources "\"$1\""
}

getAcls() {
    dfx canister call backend getAcls
}

createResource() {
    if [ $# -ne 3 ]; then
        echo "Usage: $0 createResource <course_id> <resource_type> <resource_data>"
        echo ""
        echo "<course_id> is the ID of the course."
        echo "<resource_type> is the type of the resource."
        echo "<resource_data> is the data of the resource."
        return 1
    fi
    dfx canister call backend createResource "(\"$1\", \"$2\", \"$3\")"
}

getRunMessage() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 getRunMessage <run_id>"
        echo ""
        echo "<run_id> is the ID of the run."
        return 1
    fi
    dfx canister call backend getRunMessage "\"$1\""
}

getRunQuestions() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 getRunQuestions <run_id>"
        echo ""
        echo "<run_id> is the ID of the run."
        return 1
    fi
    dfx canister call backend getRunQuestions "\"$1\""
}

getRunStatus() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 getRunStatus <run_id>"
        echo ""
        echo "<run_id> is the ID of the run."
        return 1
    fi
    dfx canister call backend getRunStatus "\"$1\""
}

getRunsInQueue() {
    dfx canister call backend getRunsInQueue
}

getUserEnrolledCourse() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 getUserEnrolledCourse <user_id>"
        echo ""
        echo "<user_id> is the ID of the user."
        return 1
    fi
    dfx canister call backend getUserEnrolledCourse "\"$1\""
}

removeAcls() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 removeAcls <principal_id>"
        echo ""
        echo "<principal_id> is the ID of the principal."
        return 1
    fi
    dfx canister call backend removeAcls "(principal \"$1\")"
}

removeQuestion() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 removeQuestion <question_id>"
        echo ""
        echo "<question_id> is the ID of the question."
        return 1
    fi
    dfx canister call backend removeQuestion "\"$1\""
}

removeResource() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 removeResource <resource_id>"
        echo ""
        echo "<resource_id> is the ID of the resource."
        return 1
    fi
    dfx canister call backend removeResource "\"$1\""
}

sendMessage() {
    if [ $# -ne 2 ]; then
        echo "Usage: $0 sendMessage <message> <recipient_id>"
        echo ""
        echo "<message> is the message to send."
        echo "<recipient_id> is the ID of the recipient."
        return 1
    fi
    dfx canister call backend sendMessage "(\"$1\", \"$2\")"
}

setAssistantId() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 setAssistantId <assistant_id>"
        echo ""
        echo "<assistant_id> is the ID of the assistant."
        return 1
    fi
    dfx canister call backend setAssistantId "\"$1\""
}

setRunProcess() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 setRunProcess <run_id>"
        echo ""
        echo "<run_id> is the ID of the run."
        return 1
    fi
    dfx canister call backend setRunProcess "\"$1\""
}

set_icrc1_token_canister() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 set_icrc1_token_canister <canister_id>"
        echo ""
        echo "<canister_id> is the ID of the canister."
        return 1
    fi
    dfx canister call backend set_icrc1_token_canister "\"$1\""
}

updateCourse() {
    if [ $# -ne 2 ]; then
        echo "Usage: $0 updateCourse <course_id> <course_data>"
        echo ""
        echo "<course_id> is the ID of the course."
        echo "<course_data> is the data of the course."
        return 1
    fi
    dfx canister call backend updateCourse "(\"$1\", \"$2\")"
}

generateQuestionsForCourse() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 generateQuestionsForCourse <course_id>"
        echo ""
        echo "<course_id> is the ID of the course."
        return 1
    fi
    dfx canister call backend generateQuestionsForCourse "\"$1\""
}

# Define the help function
cli_help() {
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Available commands:"
    for command in "${!commands[@]}"; do
        echo "  $command"
    done
    echo ""
    echo "Run '$0 <command> --help' for more information on a specific command."
}

# Parse the command-line arguments
if [ $# -eq 0 ]; then
    cli_help
    exit 1
fi

command=$1
shift

# Check if the command is valid
if [ -z "${commands[$command]}" ]; then
    cli_help
    exit 1
fi

# Call the function for the command
$command "$@"